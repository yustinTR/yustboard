/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/banking/transactions/route";
exports.ids = ["app/api/banking/transactions/route"];
exports.modules = {

/***/ "(rsc)/./app/api/auth/[...nextauth]/route.ts":
/*!*********************************************!*\
  !*** ./app/api/auth/[...nextauth]/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ handler),\n/* harmony export */   POST: () => (/* binding */ handler),\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @auth/prisma-adapter */ \"(rsc)/./node_modules/@auth/prisma-adapter/index.js\");\n/* harmony import */ var next_auth_providers_github__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/providers/github */ \"(rsc)/./node_modules/next-auth/providers/github.js\");\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next-auth/providers/google */ \"(rsc)/./node_modules/next-auth/providers/google.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./lib/prisma.ts\");\n\n\n\n\n\n// For debugging purposes\nconsole.log(\"NextAuth Config:\", {\n    googleId: process.env.GOOGLE_CLIENT_ID ? \"Set\" : \"Not set\",\n    googleSecret: process.env.GOOGLE_CLIENT_SECRET ? \"Set\" : \"Not set\",\n    nextAuthUrl: process.env.NEXTAUTH_URL,\n    nextAuthSecret: process.env.NEXTAUTH_SECRET ? \"Set\" : \"Not set\"\n});\nconst authOptions = {\n    adapter: (0,_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_1__.PrismaAdapter)(_lib_prisma__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n    providers: [\n        (0,next_auth_providers_google__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n            authorization: {\n                params: {\n                    scope: \"openid email profile https://www.googleapis.com/auth/calendar https://www.googleapis.com/auth/calendar.events https://www.googleapis.com/auth/drive.readonly https://www.googleapis.com/auth/drive.metadata.readonly https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/fitness.activity.read https://www.googleapis.com/auth/fitness.body.read\",\n                    prompt: \"consent\",\n                    access_type: \"offline\",\n                    response_type: \"code\"\n                }\n            },\n            allowDangerousEmailAccountLinking: true\n        }),\n        (0,next_auth_providers_github__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n            clientId: process.env.GITHUB_ID || \"\",\n            clientSecret: process.env.GITHUB_SECRET || \"\",\n            allowDangerousEmailAccountLinking: true\n        })\n    ],\n    callbacks: {\n        async signIn ({ user, account, profile }) {\n            console.log(\"SignIn callback:\", {\n                user: user ? {\n                    id: user.id,\n                    name: user.name,\n                    email: user.email\n                } : null,\n                account: account ? {\n                    provider: account.provider,\n                    type: account.type\n                } : null,\n                profile: profile ? {\n                    email: profile.email\n                } : null\n            });\n            // Allow sign in regardless of whether the account is already linked\n            return true;\n        },\n        async jwt ({ token, user, account, trigger, session }) {\n            // Initial sign in\n            if (account && user) {\n                console.log(\"JWT callback (initial sign in):\", {\n                    provider: account.provider,\n                    accessToken: account.access_token ? \"Provided\" : \"Missing\",\n                    refreshToken: account.refresh_token ? \"Provided\" : \"Missing\",\n                    expiresAt: account.expires_at\n                });\n                return {\n                    ...token,\n                    accessToken: account.access_token,\n                    refreshToken: account.refresh_token,\n                    accessTokenExpires: account.expires_at ? account.expires_at * 1000 : undefined,\n                    userRole: \"user\",\n                    userId: user.id\n                };\n            }\n            // Handle updates\n            if (trigger === 'update' && session) {\n                return {\n                    ...token,\n                    ...session\n                };\n            }\n            // Return previous token if the access token has not expired yet\n            if (token.accessTokenExpires && Date.now() < token.accessTokenExpires) {\n                console.log(\"JWT callback: Using existing token (not expired)\");\n                return token;\n            }\n            console.log(\"JWT callback: Token may be expired or missing expires time\");\n            return token;\n        },\n        async session ({ session, token }) {\n            // This is now always called with a token, not a user\n            if (token) {\n                console.log(\"Session callback with token:\", {\n                    userId: token.userId,\n                    accessToken: token.accessToken ? \"Provided\" : \"Missing\"\n                });\n                // Add the access token and user ID to the session\n                session.accessToken = token.accessToken;\n                session.user.id = token.userId || token.sub;\n                // Fetch user role from database\n                if (session.user.id) {\n                    const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_4__[\"default\"].user.findUnique({\n                        where: {\n                            id: session.user.id\n                        },\n                        select: {\n                            role: true\n                        }\n                    });\n                    session.user.role = user?.role || 'USER';\n                }\n            }\n            return session;\n        }\n    },\n    pages: {\n        signIn: \"/login\",\n        error: \"/login\"\n    },\n    debug: \"development\" === \"development\",\n    secret: process.env.NEXTAUTH_SECRET,\n    session: {\n        strategy: \"jwt\",\n        maxAge: 24 * 60 * 60\n    },\n    logger: {\n        error (code, metadata) {\n            console.error(`NextAuth Error: ${code}`, metadata);\n        },\n        warn (code) {\n            console.warn(`NextAuth Warning: ${code}`);\n        },\n        debug (code, metadata) {\n            console.log(`NextAuth Debug: ${code}`, metadata);\n        }\n    }\n};\nconst handler = next_auth__WEBPACK_IMPORTED_MODULE_0___default()(authOptions);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/auth/[...nextauth]/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/api/banking/transactions/route.ts":
/*!***********************************************!*\
  !*** ./app/api/banking/transactions/route.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/next */ \"(rsc)/./node_modules/next-auth/next/index.js\");\n/* harmony import */ var _app_api_auth_nextauth_route__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/app/api/auth/[...nextauth]/route */ \"(rsc)/./app/api/auth/[...nextauth]/route.ts\");\n/* harmony import */ var _utils_gmail_transactions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/gmail-transactions */ \"(rsc)/./utils/gmail-transactions.ts\");\n\n\n\n\nasync function GET(request) {\n    try {\n        // Get the user's session\n        const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_app_api_auth_nextauth_route__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session?.accessToken) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Unauthorized - No access token available'\n            }, {\n                status: 401\n            });\n        }\n        // Parse query parameters\n        const { searchParams } = new URL(request.url);\n        const daysBack = searchParams.get('days') ? parseInt(searchParams.get('days'), 10) : 30;\n        const maxResults = searchParams.get('max') ? parseInt(searchParams.get('max'), 10) : 100;\n        const statsOnly = searchParams.get('statsOnly') === 'true';\n        const debug = searchParams.get('debug') === 'true';\n        // Fetch transactions from Gmail\n        const transactions = await (0,_utils_gmail_transactions__WEBPACK_IMPORTED_MODULE_3__.fetchTransactionsFromGmail)(session.accessToken, daysBack, maxResults, debug);\n        // If statsOnly parameter is true, return only the stats\n        if (statsOnly) {\n            const stats = (0,_utils_gmail_transactions__WEBPACK_IMPORTED_MODULE_3__.getTransactionStats)(transactions);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                stats\n            });\n        }\n        // Otherwise, return both transactions and stats\n        const stats = (0,_utils_gmail_transactions__WEBPACK_IMPORTED_MODULE_3__.getTransactionStats)(transactions);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            transactions,\n            stats\n        });\n    } catch (error) {\n        console.error('Error in banking transactions API route:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to fetch transactions'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2JhbmtpbmcvdHJhbnNhY3Rpb25zL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJDO0FBQ087QUFDZTtBQUM0QjtBQUV0RixlQUFlSyxJQUFJQyxPQUFnQjtJQUN4QyxJQUFJO1FBQ0YseUJBQXlCO1FBQ3pCLE1BQU1DLFVBQVUsTUFBTU4sZ0VBQWdCQSxDQUFDQyxxRUFBV0E7UUFFbEQsSUFBSSxDQUFDSyxTQUFTQyxhQUFhO1lBQ3pCLE9BQU9SLHFEQUFZQSxDQUFDUyxJQUFJLENBQ3RCO2dCQUFFQyxPQUFPO1lBQTJDLEdBQ3BEO2dCQUFFQyxRQUFRO1lBQUk7UUFFbEI7UUFFQSx5QkFBeUI7UUFDekIsTUFBTSxFQUFFQyxZQUFZLEVBQUUsR0FBRyxJQUFJQyxJQUFJUCxRQUFRUSxHQUFHO1FBQzVDLE1BQU1DLFdBQVdILGFBQWFJLEdBQUcsQ0FBQyxVQUFVQyxTQUFTTCxhQUFhSSxHQUFHLENBQUMsU0FBbUIsTUFBTTtRQUMvRixNQUFNRSxhQUFhTixhQUFhSSxHQUFHLENBQUMsU0FBU0MsU0FBU0wsYUFBYUksR0FBRyxDQUFDLFFBQWtCLE1BQU07UUFDL0YsTUFBTUcsWUFBWVAsYUFBYUksR0FBRyxDQUFDLGlCQUFpQjtRQUNwRCxNQUFNSSxRQUFRUixhQUFhSSxHQUFHLENBQUMsYUFBYTtRQUU1QyxnQ0FBZ0M7UUFDaEMsTUFBTUssZUFBZSxNQUFNbEIscUZBQTBCQSxDQUNuREksUUFBUUMsV0FBVyxFQUNuQk8sVUFDQUcsWUFDQUU7UUFHRix3REFBd0Q7UUFDeEQsSUFBSUQsV0FBVztZQUNiLE1BQU1HLFFBQVFsQiw4RUFBbUJBLENBQUNpQjtZQUNsQyxPQUFPckIscURBQVlBLENBQUNTLElBQUksQ0FBQztnQkFBRWE7WUFBTTtRQUNuQztRQUVBLGdEQUFnRDtRQUNoRCxNQUFNQSxRQUFRbEIsOEVBQW1CQSxDQUFDaUI7UUFDbEMsT0FBT3JCLHFEQUFZQSxDQUFDUyxJQUFJLENBQUM7WUFBRVk7WUFBY0M7UUFBTTtJQUNqRCxFQUFFLE9BQU9aLE9BQU87UUFDZGEsUUFBUWIsS0FBSyxDQUFDLDRDQUE0Q0E7UUFFMUQsT0FBT1YscURBQVlBLENBQUNTLElBQUksQ0FDdEI7WUFBRUMsT0FBTztRQUErQixHQUN4QztZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3l1c3RpbnRyb29zdC9Eb2N1bWVudHMvc2l0ZXMveXVzdGJvYXJkL2FwcC9hcGkvYmFua2luZy90cmFuc2FjdGlvbnMvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgZ2V0U2VydmVyU2Vzc2lvbiB9IGZyb20gJ25leHQtYXV0aC9uZXh0JztcbmltcG9ydCB7IGF1dGhPcHRpb25zIH0gZnJvbSAnQC9hcHAvYXBpL2F1dGgvWy4uLm5leHRhdXRoXS9yb3V0ZSc7XG5pbXBvcnQgeyBmZXRjaFRyYW5zYWN0aW9uc0Zyb21HbWFpbCwgZ2V0VHJhbnNhY3Rpb25TdGF0cyB9IGZyb20gJ0AvdXRpbHMvZ21haWwtdHJhbnNhY3Rpb25zJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgLy8gR2V0IHRoZSB1c2VyJ3Mgc2Vzc2lvblxuICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBnZXRTZXJ2ZXJTZXNzaW9uKGF1dGhPcHRpb25zKTtcbiAgICBcbiAgICBpZiAoIXNlc3Npb24/LmFjY2Vzc1Rva2VuKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQgLSBObyBhY2Nlc3MgdG9rZW4gYXZhaWxhYmxlJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAxIH1cbiAgICAgICk7XG4gICAgfVxuICAgIFxuICAgIC8vIFBhcnNlIHF1ZXJ5IHBhcmFtZXRlcnNcbiAgICBjb25zdCB7IHNlYXJjaFBhcmFtcyB9ID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgY29uc3QgZGF5c0JhY2sgPSBzZWFyY2hQYXJhbXMuZ2V0KCdkYXlzJykgPyBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdkYXlzJykgYXMgc3RyaW5nLCAxMCkgOiAzMDtcbiAgICBjb25zdCBtYXhSZXN1bHRzID0gc2VhcmNoUGFyYW1zLmdldCgnbWF4JykgPyBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdtYXgnKSBhcyBzdHJpbmcsIDEwKSA6IDEwMDtcbiAgICBjb25zdCBzdGF0c09ubHkgPSBzZWFyY2hQYXJhbXMuZ2V0KCdzdGF0c09ubHknKSA9PT0gJ3RydWUnO1xuICAgIGNvbnN0IGRlYnVnID0gc2VhcmNoUGFyYW1zLmdldCgnZGVidWcnKSA9PT0gJ3RydWUnO1xuICAgIFxuICAgIC8vIEZldGNoIHRyYW5zYWN0aW9ucyBmcm9tIEdtYWlsXG4gICAgY29uc3QgdHJhbnNhY3Rpb25zID0gYXdhaXQgZmV0Y2hUcmFuc2FjdGlvbnNGcm9tR21haWwoXG4gICAgICBzZXNzaW9uLmFjY2Vzc1Rva2VuLFxuICAgICAgZGF5c0JhY2ssXG4gICAgICBtYXhSZXN1bHRzLFxuICAgICAgZGVidWdcbiAgICApO1xuICAgIFxuICAgIC8vIElmIHN0YXRzT25seSBwYXJhbWV0ZXIgaXMgdHJ1ZSwgcmV0dXJuIG9ubHkgdGhlIHN0YXRzXG4gICAgaWYgKHN0YXRzT25seSkge1xuICAgICAgY29uc3Qgc3RhdHMgPSBnZXRUcmFuc2FjdGlvblN0YXRzKHRyYW5zYWN0aW9ucyk7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBzdGF0cyB9KTtcbiAgICB9XG4gICAgXG4gICAgLy8gT3RoZXJ3aXNlLCByZXR1cm4gYm90aCB0cmFuc2FjdGlvbnMgYW5kIHN0YXRzXG4gICAgY29uc3Qgc3RhdHMgPSBnZXRUcmFuc2FjdGlvblN0YXRzKHRyYW5zYWN0aW9ucyk7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgdHJhbnNhY3Rpb25zLCBzdGF0cyB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBiYW5raW5nIHRyYW5zYWN0aW9ucyBBUEkgcm91dGU6JywgZXJyb3IpO1xuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggdHJhbnNhY3Rpb25zJyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufSJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJnZXRTZXJ2ZXJTZXNzaW9uIiwiYXV0aE9wdGlvbnMiLCJmZXRjaFRyYW5zYWN0aW9uc0Zyb21HbWFpbCIsImdldFRyYW5zYWN0aW9uU3RhdHMiLCJHRVQiLCJyZXF1ZXN0Iiwic2Vzc2lvbiIsImFjY2Vzc1Rva2VuIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwic2VhcmNoUGFyYW1zIiwiVVJMIiwidXJsIiwiZGF5c0JhY2siLCJnZXQiLCJwYXJzZUludCIsIm1heFJlc3VsdHMiLCJzdGF0c09ubHkiLCJkZWJ1ZyIsInRyYW5zYWN0aW9ucyIsInN0YXRzIiwiY29uc29sZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/banking/transactions/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prisma = global.prisma || new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) {\n    global.prisma = prisma;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEM7QUFZdkMsTUFBTUMsU0FBU0MsT0FBT0QsTUFBTSxJQUFJLElBQUlELHdEQUFZQSxHQUFHO0FBRTFELElBQUlHLElBQXFDLEVBQUU7SUFDekNELE9BQU9ELE1BQU0sR0FBR0E7QUFDbEI7QUFFQSxpRUFBZUEsTUFBTUEsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL3l1c3RpbnRyb29zdC9Eb2N1bWVudHMvc2l0ZXMveXVzdGJvYXJkL2xpYi9wcmlzbWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG4vLyBQcmlzbWFDbGllbnQgaXMgYXR0YWNoZWQgdG8gdGhlIGBnbG9iYWxgIG9iamVjdCBpbiBkZXZlbG9wbWVudCB0byBwcmV2ZW50XG4vLyBleGhhdXN0aW5nIHlvdXIgZGF0YWJhc2UgY29ubmVjdGlvbiBsaW1pdC5cbi8vXG4vLyBMZWFybiBtb3JlOiBcbi8vIGh0dHBzOi8vcHJpcy5seS9kL2hlbHAvbmV4dC1qcy1iZXN0LXByYWN0aWNlc1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIHZhciBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNvbnN0IHByaXNtYSA9IGdsb2JhbC5wcmlzbWEgfHwgbmV3IFByaXNtYUNsaWVudCgpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBnbG9iYWwucHJpc21hID0gcHJpc21hO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwcmlzbWE7Il0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsInByaXNtYSIsImdsb2JhbCIsInByb2Nlc3MiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/prisma.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fbanking%2Ftransactions%2Froute&page=%2Fapi%2Fbanking%2Ftransactions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbanking%2Ftransactions%2Froute.ts&appDir=%2FUsers%2Fyustintroost%2FDocuments%2Fsites%2Fyustboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyustintroost%2FDocuments%2Fsites%2Fyustboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fbanking%2Ftransactions%2Froute&page=%2Fapi%2Fbanking%2Ftransactions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbanking%2Ftransactions%2Froute.ts&appDir=%2FUsers%2Fyustintroost%2FDocuments%2Fsites%2Fyustboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyustintroost%2FDocuments%2Fsites%2Fyustboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_yustintroost_Documents_sites_yustboard_app_api_banking_transactions_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/banking/transactions/route.ts */ \"(rsc)/./app/api/banking/transactions/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/banking/transactions/route\",\n        pathname: \"/api/banking/transactions\",\n        filename: \"route\",\n        bundlePath: \"app/api/banking/transactions/route\"\n    },\n    resolvedPagePath: \"/Users/yustintroost/Documents/sites/yustboard/app/api/banking/transactions/route.ts\",\n    nextConfigOutput,\n    userland: _Users_yustintroost_Documents_sites_yustboard_app_api_banking_transactions_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZiYW5raW5nJTJGdHJhbnNhY3Rpb25zJTJGcm91dGUmcGFnZT0lMkZhcGklMkZiYW5raW5nJTJGdHJhbnNhY3Rpb25zJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYmFua2luZyUyRnRyYW5zYWN0aW9ucyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnl1c3RpbnRyb29zdCUyRkRvY3VtZW50cyUyRnNpdGVzJTJGeXVzdGJvYXJkJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRnl1c3RpbnRyb29zdCUyRkRvY3VtZW50cyUyRnNpdGVzJTJGeXVzdGJvYXJkJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNtQztBQUNoSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL3l1c3RpbnRyb29zdC9Eb2N1bWVudHMvc2l0ZXMveXVzdGJvYXJkL2FwcC9hcGkvYmFua2luZy90cmFuc2FjdGlvbnMvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2JhbmtpbmcvdHJhbnNhY3Rpb25zL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYmFua2luZy90cmFuc2FjdGlvbnNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2JhbmtpbmcvdHJhbnNhY3Rpb25zL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL3l1c3RpbnRyb29zdC9Eb2N1bWVudHMvc2l0ZXMveXVzdGJvYXJkL2FwcC9hcGkvYmFua2luZy90cmFuc2FjdGlvbnMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fbanking%2Ftransactions%2Froute&page=%2Fapi%2Fbanking%2Ftransactions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbanking%2Ftransactions%2Froute.ts&appDir=%2FUsers%2Fyustintroost%2FDocuments%2Fsites%2Fyustboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyustintroost%2FDocuments%2Fsites%2Fyustboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./utils/gmail-transactions.ts":
/*!*************************************!*\
  !*** ./utils/gmail-transactions.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchTransactionsFromGmail: () => (/* binding */ fetchTransactionsFromGmail),\n/* harmony export */   getTransactionStats: () => (/* binding */ getTransactionStats),\n/* harmony export */   transactionCategories: () => (/* binding */ transactionCategories)\n/* harmony export */ });\n/* harmony import */ var _google_gmail__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./google-gmail */ \"(rsc)/./utils/google-gmail.ts\");\n\n// Common transaction patterns for popular services\nconst transactionPatterns = [\n    // Uber - Further enhanced with more detailed patterns for better detection\n    {\n        source: 'uber.com',\n        subjectPatterns: [\n            /your (?:uber|ubereats) receipt/i,\n            /your (?:trip|order|ride) with uber/i,\n            /thanks for riding/i,\n            /receipt from (?:your trip|your ride|uber)/i,\n            /uber(eats)? order/i,\n            /your uber (?:ride|eats) receipt/i,\n            /uber receipt:? .+/i,\n            /rit met Uber/i,\n            /bedankt voor het rijden met uber/i,\n            /je uber(?:eats)? bon/i // Dutch: Your Uber(Eats) receipt\n        ],\n        bodyPatterns: {\n            // Enhanced Uber patterns to detect various formats including international formats\n            amount: /(?:Total|Amount|Trip total|Totaal|Total fare|Total trip price|Trip price|Price|Ritprijs|Prijs|Fare|Subtotal|Order total):?\\s*[$€£]?\\s*([\\d.,]+)[$€£]?/i,\n            description: /(?:trip|ride|order|rit|bestelling) (?:with|met) uber|(?:from|to|van|naar):?\\s*([^<\\n]+)/i,\n            merchant: /(?:driver|restaurant|store|partner|chauffeur|winkel):?\\s*([^<\\n]+)/i\n        },\n        category: 'Transportation',\n        type: 'expense'\n    },\n    // UberEats - Specific pattern for food orders\n    {\n        source: 'uber.com',\n        subjectPatterns: [\n            /your uber ?eats order/i,\n            /your order from .+ has been delivered/i,\n            /uber ?eats:? receipt/i,\n            /your uber ?eats receipt/i,\n            /bedankt voor je bestelling/i,\n            /je uber ?eats bestelling/i,\n            /je bestelling is onderweg/i // Dutch: Your order is on the way\n        ],\n        bodyPatterns: {\n            amount: /(?:Total|Amount|Order total|Totaal|Bestelbedrag|Total amount charged):?\\s*[$€£]?\\s*([\\d.,]+)[$€£]?/i,\n            description: /(?:order|bestelling) (?:from|van):?\\s*([^<\\n]+)/i,\n            merchant: /(?:restaurant|store|partner|restaurant|winkel):?\\s*([^<\\n]+)/i\n        },\n        category: 'Food & Dining',\n        type: 'expense'\n    },\n    // American Express - Significantly enhanced with more detailed patterns\n    {\n        source: 'americanexpress.com',\n        subjectPatterns: [\n            /your american express/i,\n            /your (?:amex|american express) statement/i,\n            /your (?:amex|american express) account/i,\n            /your (?:amex|american express) card/i,\n            /your (?:amex|american express) bill/i,\n            /american express payment confirmation/i,\n            /transaction alert/i,\n            /your transaction with american express/i,\n            /you have a new (?:amex|american express) notification/i,\n            /recent card(?:member)? transaction/i,\n            /purchase alert/i,\n            /charge on your card/i,\n            /payment received/i,\n            /je american express (?:transactie|betaling)/i,\n            /american express: aankoop/i // Dutch: American Express: purchase\n        ],\n        bodyPatterns: {\n            // More comprehensive patterns for amounts with international support\n            amount: /(?:Amount|Total|Charge|Payment|Purchase|Transaction|Bedrag|Transactie|Betaling|Aankoop):?\\s*[$€£]?\\s*([\\d,.]+)[$€£]?|[$€£]\\s*([\\d,.]+)/i,\n            description: /(?:purchase|transaction|payment|charge|aankoop|transactie|betaling) (?:at|with|to|from|bij|van|met):?\\s*([^<\\n.,]+)/i,\n            merchant: /(?:merchant|vendor|retailer|business|bedrijf|winkel|handelaar):?\\s*([^<\\n.,]+)/i\n        },\n        category: 'Credit Card',\n        type: 'expense'\n    },\n    // American Express Transaction Alert - Specific format\n    {\n        source: 'americanexpress.com',\n        subjectPatterns: [\n            /transaction alert/i,\n            /purchase alert/i,\n            /recent transaction/i,\n            /charge on your card/i\n        ],\n        bodyPatterns: {\n            // Specific patterns for transaction alerts which have a different format\n            amount: /(?:in the amount of|for an amount of|for|ter waarde van)\\s*[$€£]?\\s*([\\d,.]+)[$€£]?|[$€£]\\s*([\\d,.]+)/i,\n            description: /(?:at|with|to|from|bij|van):?\\s*([^<\\n.,]+)/i,\n            merchant: /(?:merchant|vendor|retailer|business|bedrijf|winkel|handelaar):?\\s*([^<\\n.,]+)|(?:at|with|to|from|bij|van):?\\s*([^<\\n.,]+)/i\n        },\n        category: 'Credit Card',\n        type: 'expense'\n    },\n    // PayPal\n    {\n        source: 'paypal.com',\n        subjectPatterns: [\n            /receipt for your payment/i,\n            /you sent a payment/i,\n            /you've received a payment/i,\n            /paypal payment confirmation/i,\n            /payment received/i\n        ],\n        bodyPatterns: {\n            amount: /(?:Amount|Total|Payment|Bedrag|Totaal):?\\s*[$€£]?\\s*([\\d,.]+)[$€£]?/i,\n            description: /(?:description|for|item|transaction|payment for|voor):?\\s*([^<\\n]+)/i,\n            merchant: /(?:to|merchant|business|aan):?\\s*([^<\\n]+)/i\n        },\n        category: 'Online Payment',\n        type: 'expense'\n    },\n    // PayPal Received Money\n    {\n        source: 'paypal.com',\n        subjectPatterns: [\n            /you've received money/i,\n            /you've received a payment/i,\n            /you've got money/i,\n            /payment received/i\n        ],\n        bodyPatterns: {\n            amount: /(?:Amount|Total|Payment|Bedrag):?\\s*[$€£]?\\s*([\\d,.]+)[$€£]?/i,\n            description: /(?:description|for|item|transaction|payment for|voor):?\\s*([^<\\n]+)/i,\n            merchant: /(?:from|van):?\\s*([^<\\n]+)/i\n        },\n        category: 'Online Payment',\n        type: 'income'\n    },\n    // Amazon\n    {\n        source: 'amazon',\n        subjectPatterns: [\n            /your amazon\\.com order/i,\n            /your order has shipped/i,\n            /your amazon order .* has shipped/i,\n            /your amazon\\.nl order/i,\n            /your amazon purchase/i,\n            /amazon order confirmation/i\n        ],\n        bodyPatterns: {\n            amount: /(?:Total|Order Total|Grand Total|Totaal|Bestelbedrag):?\\s*[$€£]?\\s*([\\d,.]+)[$€£]?/i,\n            description: /(?:order|item|purchased|buy|bought|bestelling):?\\s*([^<\\n]+)/i\n        },\n        category: 'Shopping',\n        type: 'expense'\n    },\n    // Bol.com - New pattern for Dutch shoppers\n    {\n        source: 'bol.com',\n        subjectPatterns: [\n            /je bestelling/i,\n            /je aankoop/i,\n            /bol\\.com (?:bestelling|order)/i,\n            /bedankt voor je bestelling/i,\n            /bevestiging van je bestelling/i\n        ],\n        bodyPatterns: {\n            amount: /(?:Totaal|Totaalbedrag|Bestelbedrag):?\\s*[€]?\\s*([\\d,.]+)[€]?/i,\n            description: /(?:bestelling|artikel|product|aankoop):?\\s*([^<\\n]+)/i\n        },\n        category: 'Shopping',\n        type: 'expense'\n    },\n    // Stripe\n    {\n        source: 'stripe.com',\n        subjectPatterns: [\n            /payment receipt/i,\n            /receipt from/i,\n            /your .* receipt/i,\n            /payment confirmation/i\n        ],\n        bodyPatterns: {\n            amount: /(?:Amount|Total|Payment|Bedrag):?\\s*[$€£]?\\s*([\\d,.]+)[$€£]?/i,\n            description: /(?:description|for|item|purchased|voor):?\\s*([^<\\n]+)/i\n        },\n        category: 'Online Payment',\n        type: 'expense'\n    },\n    // Klarna\n    {\n        source: 'klarna',\n        subjectPatterns: [\n            /your klarna purchase/i,\n            /payment confirmation/i,\n            /your order with/i,\n            /je klarna aankoop/i,\n            /betalingsbevestiging/i\n        ],\n        bodyPatterns: {\n            amount: /(?:Amount|Total|Price|Bedrag|Totaal|Prijs):?\\s*[$€£]?\\s*([\\d,.]+)[$€£]?/i,\n            description: /(?:you purchased|order|item|je hebt gekocht|bestelling|artikel):?\\s*([^<\\n]+)/i,\n            merchant: /(?:from|at|merchant|van|bij|verkoper):?\\s*([^<\\n]+)/i\n        },\n        category: 'Shopping',\n        type: 'expense'\n    },\n    // Rent\n    {\n        source: 'rent',\n        subjectPatterns: [\n            /rent (?:payment|receipt)/i,\n            /your monthly rent/i,\n            /rent confirmation/i,\n            /huur(betaling)?/i\n        ],\n        bodyPatterns: {\n            amount: /(?:Amount|Total|Payment|Rent|Bedrag|Huur):?\\s*[$€£]?\\s*([\\d,.]+)[$€£]?/i\n        },\n        category: 'Housing',\n        type: 'expense'\n    },\n    // Utility Bill\n    {\n        source: 'utility',\n        subjectPatterns: [\n            /(?:electric|gas|water|internet|phone) bill/i,\n            /utility (?:bill|payment)/i,\n            /your (?:monthly|weekly) (?:bill|statement)/i,\n            /(?:elektriciteit|gas|water|internet|telefoon) (?:rekening|factuur)/i\n        ],\n        bodyPatterns: {\n            amount: /(?:Amount|Total|Payment|Due|Bedrag|Totaal|Te betalen):?\\s*[$€£]?\\s*([\\d,.]+)[$€£]?/i\n        },\n        category: 'Utilities',\n        type: 'expense'\n    },\n    // Salary / Income\n    {\n        source: 'salary',\n        subjectPatterns: [\n            /(?:salary|payment|payslip|direct deposit)/i,\n            /your (?:payment|salary) has been processed/i,\n            /(?:salaris|betaling|loonstrook)/i\n        ],\n        bodyPatterns: {\n            amount: /(?:Amount|Total|Net|Gross|Bedrag|Netto|Bruto):?\\s*[$€£]?\\s*([\\d,.]+)[$€£]?/i\n        },\n        category: 'Income',\n        type: 'income'\n    },\n    // Subscriptions\n    {\n        source: 'subscription',\n        subjectPatterns: [\n            /your (?:subscription|membership)/i,\n            /(?:netflix|spotify|disney|hbo|apple) (?:receipt|invoice|payment)/i,\n            /your (?:monthly|annual|weekly) subscription/i,\n            /je (?:abonnement|lidmaatschap)/i\n        ],\n        bodyPatterns: {\n            amount: /(?:Amount|Total|Payment|Charge|Bedrag):?\\s*[$€£]?\\s*([\\d,.]+)[$€£]?/i\n        },\n        category: 'Subscriptions',\n        type: 'expense'\n    },\n    // Generic Transactions\n    {\n        source: 'transaction',\n        subjectPatterns: [\n            /(?:payment|transaction|purchase|receipt|invoice)/i,\n            /your (?:recent|new) (?:purchase|transaction)/i,\n            /(?:betaling|transactie|aankoop|bon|factuur)/i\n        ],\n        bodyPatterns: {\n            amount: /(?:Amount|Total|Payment|Price|Bedrag|Totaal|Prijs):?\\s*[$€£]?\\s*([\\d,.]+)[$€£]?/i,\n            description: /(?:for|item|description|purchased|voor|artikel|omschrijving|gekocht):?\\s*([^<\\n]+)/i\n        },\n        category: 'Other',\n        type: 'expense'\n    }\n];\n// Common categories\nconst transactionCategories = [\n    'Food & Dining',\n    'Shopping',\n    'Transportation',\n    'Housing',\n    'Utilities',\n    'Entertainment',\n    'Travel',\n    'Health',\n    'Education',\n    'Subscriptions',\n    'Income',\n    'Online Payment',\n    'Other'\n];\n// Helper function to clean amount string and convert to number\nfunction parseAmount(amountStr, type) {\n    // Remove currency symbols and non-numeric characters except for decimal points\n    const cleaned = amountStr.replace(/[^0-9.,]/g, '').replace(/,/g, '.');\n    // Find the last period as decimal point\n    let amount;\n    if (cleaned.lastIndexOf('.') > 0) {\n        const parts = cleaned.split('.');\n        const decimal = parts.pop();\n        amount = parseFloat(`${parts.join('')}.${decimal}`);\n    } else {\n        amount = parseFloat(cleaned);\n    }\n    // Make sure expenses are negative and income is positive\n    if (type === 'expense' && amount > 0) {\n        amount = -amount;\n    } else if ((type === 'income' || type === 'refund') && amount < 0) {\n        amount = Math.abs(amount);\n    }\n    return amount;\n}\n// Helper function to try to detect currency from email content\nfunction detectCurrency(content) {\n    if (content.includes('$') || content.includes('USD')) return 'USD';\n    if (content.includes('€') || content.includes('EUR')) return 'EUR';\n    if (content.includes('£') || content.includes('GBP')) return 'GBP';\n    return 'USD'; // Default currency\n}\n// Extract transaction data from an email\nfunction extractTransactionFromEmail(email) {\n    const fromDomain = email.from.email.split('@')[1].toLowerCase();\n    const subject = email.subject;\n    const content = email.snippet + (email.body || '');\n    // Check each pattern to see if this email matches a transaction pattern\n    for (const pattern of transactionPatterns){\n        // Check if email is from the source or contains source in domain/name\n        const isFromSource = fromDomain.includes(pattern.source.toLowerCase()) || email.from.name?.toLowerCase().includes(pattern.source.toLowerCase()) || subject.toLowerCase().includes(pattern.source.toLowerCase());\n        if (!isFromSource) {\n            debugLog(`Skipping pattern for source \"${pattern.source}\" - email source doesn't match`);\n            continue;\n        }\n        // Check if subject matches any of the patterns\n        let matchedSubjectPattern = null;\n        for (const p of pattern.subjectPatterns){\n            if (p.test(subject)) {\n                matchedSubjectPattern = p;\n                break;\n            }\n        }\n        if (!matchedSubjectPattern) {\n            debugLog(`Email source matches \"${pattern.source}\" but subject doesn't match any pattern`);\n            continue;\n        }\n        debugLog(`Found matching pattern for source \"${pattern.source}\"`);\n        debugLog(`Subject matched pattern: ${matchedSubjectPattern.toString()}`);\n        // If we have a match, try to extract transaction details\n        let amount = null;\n        let description = '';\n        let merchant = '';\n        let status = 'completed';\n        // Try to extract amount\n        if (pattern.bodyPatterns?.amount) {\n            const amountMatch = content.match(pattern.bodyPatterns.amount);\n            if (amountMatch && amountMatch[1]) {\n                amount = parseAmount(amountMatch[1], pattern.type);\n                debugLog(`Extracted amount: ${amountMatch[1]} => ${amount}`);\n            } else {\n                debugLog(`Failed to extract amount using pattern: ${pattern.bodyPatterns.amount.toString()}`);\n            }\n        }\n        // If no amount found, skip this transaction\n        if (amount === null) {\n            debugLog('No amount found, skipping transaction');\n            continue;\n        }\n        // Try to extract description\n        if (pattern.bodyPatterns?.description) {\n            const descMatch = content.match(pattern.bodyPatterns.description);\n            if (descMatch && descMatch[1]) {\n                description = descMatch[1].trim();\n                debugLog(`Extracted description: \"${description}\"`);\n            } else {\n                debugLog(`Failed to extract description using pattern: ${pattern.bodyPatterns.description.toString()}`);\n            }\n        }\n        // If no description, use subject\n        if (!description) {\n            description = subject;\n            debugLog(`Using subject as description: \"${description}\"`);\n        }\n        // Try to extract merchant\n        if (pattern.bodyPatterns?.merchant) {\n            const merchantMatch = content.match(pattern.bodyPatterns.merchant);\n            if (merchantMatch && merchantMatch[1]) {\n                merchant = merchantMatch[1].trim();\n                debugLog(`Extracted merchant: \"${merchant}\"`);\n            } else {\n                debugLog(`Failed to extract merchant using pattern: ${pattern.bodyPatterns.merchant.toString()}`);\n            }\n        }\n        // If no merchant extracted, use the email sender\n        if (!merchant) {\n            merchant = email.from.name || email.from.email.split('@')[0];\n            debugLog(`Using sender as merchant: \"${merchant}\"`);\n        }\n        // Try to extract status\n        if (pattern.bodyPatterns?.status) {\n            const statusMatch = content.match(pattern.bodyPatterns.status);\n            if (statusMatch && statusMatch[1]) {\n                const statusText = statusMatch[1].toLowerCase();\n                if (statusText.includes('refund') || statusText.includes('returned')) {\n                    status = 'refunded';\n                } else if (statusText.includes('pending') || statusText.includes('processing')) {\n                    status = 'pending';\n                }\n                debugLog(`Extracted status: \"${status}\"`);\n            }\n        }\n        // Detect refunds in subject or description\n        if (subject.toLowerCase().includes('refund') || description.toLowerCase().includes('refund')) {\n            status = 'refunded';\n            debugLog(`Detected refund in subject/description, setting status to refunded`);\n            if (pattern.type === 'expense') {\n                // Refund of an expense is positive (money coming back to you)\n                amount = Math.abs(amount);\n                debugLog(`Converted expense to refund, amount adjusted to positive: ${amount}`);\n            }\n        }\n        // Get currency\n        const currency = detectCurrency(content);\n        debugLog(`Detected currency: ${currency}`);\n        // Create a transaction object\n        debugLog(`Successfully extracted transaction from email pattern-matching`);\n        return {\n            id: `email_${email.id}`,\n            date: new Date(email.date),\n            amount,\n            currency,\n            description,\n            category: pattern.category,\n            merchant,\n            status,\n            type: pattern.type,\n            source: 'email',\n            sourceDetails: {\n                emailId: email.id,\n                from: email.from.email,\n                subject: email.subject,\n                timestamp: new Date(email.date)\n            }\n        };\n    }\n    debugLog(`No matching transaction patterns found for this email`);\n    return null;\n}\n// We don't use a persistent deduplication set anymore as it causes issues with refreshing\n// Instead, we'll create a new set for each function call\n// Extract currency amount with support for various formats\nfunction extractCurrencyAmount(text) {\n    // Match various currency formats (€, $, £, etc.)\n    // Support both European (1.234,56) and American (1,234.56) formats\n    const patterns = [\n        // European format with € symbol (€ 123,45)\n        /[€]\\s*(\\d{1,3}(?:[.]\\d{3})*,\\d{2})/i,\n        // American format with $ symbol ($123.45)\n        /[$]\\s*(\\d{1,3}(?:[,]\\d{3})*\\.\\d{2})/i,\n        // British format with £ symbol (£123.45)\n        /[£]\\s*(\\d{1,3}(?:[,]\\d{3})*\\.\\d{2})/i,\n        // Format with currency code before amount (EUR 123,45)\n        /(EUR|USD|GBP)\\s+(\\d{1,3}(?:[.]\\d{3})*,\\d{2}|\\d{1,3}(?:[,]\\d{3})*\\.\\d{2})/i,\n        // Format with currency code after amount (123,45 EUR)\n        /(\\d{1,3}(?:[.]\\d{3})*,\\d{2}|\\d{1,3}(?:[,]\\d{3})*\\.\\d{2})\\s+(EUR|USD|GBP)/i,\n        // General amount with nearby currency indicator\n        /(?:total|amount|price|payment|total amount|trip total|totaal|bedrag|prijs)(?:.{0,30})([$€£]\\s*\\d{1,3}(?:[.,]\\d{3})*[.,]\\d{2}|\\d{1,3}(?:[.,]\\d{3})*[.,]\\d{2}\\s*[$€£]|(?:EUR|USD|GBP)\\s+\\d{1,3}(?:[.,]\\d{3})*[.,]\\d{2}|\\d{1,3}(?:[.,]\\d{3})*[.,]\\d{2}\\s+(?:EUR|USD|GBP))/i,\n        // Simple number formats that are likely currency amounts\n        /(?:total|amount|price|payment|charge|betaling|kosten):?\\s*(\\d{1,3}(?:[.,]\\d{3})*[.,]\\d{2})/i,\n        // Uber specific formats\n        /(?:trip total|fare|total fare|ritprijs):?\\s*[$€£]?\\s*(\\d{1,3}(?:[.,]\\d{3})*[.,]\\d{2})/i,\n        // American Express specific formats\n        /(?:in the amount of|for an amount of|ter waarde van):?\\s*[$€£]?\\s*(\\d{1,3}(?:[.,]\\d{3})*[.,]\\d{2})/i\n    ];\n    let match = null;\n    let matchedPattern = -1;\n    // Try each pattern\n    for(let i = 0; i < patterns.length; i++){\n        const pattern = patterns[i];\n        match = pattern.exec(text);\n        if (match) {\n            matchedPattern = i;\n            break;\n        }\n    }\n    if (!match) return null;\n    let amount;\n    let currency = 'EUR'; // Default to EUR\n    // Parse based on which pattern matched\n    switch(matchedPattern){\n        case 0:\n            amount = match[1].replace('.', '').replace(',', '.');\n            currency = 'EUR';\n            break;\n        case 1:\n            amount = match[1].replace(',', '');\n            currency = 'USD';\n            break;\n        case 2:\n            amount = match[1].replace(',', '');\n            currency = 'GBP';\n            break;\n        case 3:\n            currency = match[1].toUpperCase();\n            amount = match[2].includes(',') ? match[2].replace('.', '').replace(',', '.') // European format\n             : match[2].replace(',', ''); // American format\n            break;\n        case 4:\n            currency = match[2].toUpperCase();\n            amount = match[1].includes(',') ? match[1].replace('.', '').replace(',', '.') // European format\n             : match[1].replace(',', ''); // American format\n            break;\n        case 5:\n            // Extract the amount part from the matched string\n            const fullMatch = match[1];\n            if (fullMatch.includes('€') || fullMatch.includes('EUR')) {\n                currency = 'EUR';\n            } else if (fullMatch.includes('$') || fullMatch.includes('USD')) {\n                currency = 'USD';\n            } else if (fullMatch.includes('£') || fullMatch.includes('GBP')) {\n                currency = 'GBP';\n            }\n            // Extract just the numeric part\n            const numericMatch = /(\\d{1,3}(?:[.,]\\d{3})*[.,]\\d{2})/.exec(fullMatch);\n            if (!numericMatch) return null;\n            // Convert to standard format\n            amount = numericMatch[1].includes(',') ? numericMatch[1].replace('.', '').replace(',', '.') // European format\n             : numericMatch[1].replace(',', ''); // American format\n            break;\n        default:\n            return null;\n    }\n    return {\n        amount: parseFloat(amount),\n        currency\n    };\n}\n// Extract date from text with various formats\nfunction extractDate(text) {\n    // Match various date formats\n    const patterns = [\n        // ISO format: 2023-05-21\n        /(\\d{4}-\\d{2}-\\d{2})/,\n        // European format: 21/05/2023 or 21-05-2023\n        /(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})/,\n        // American format: 05/21/2023 or 05-21-2023\n        /(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})/,\n        // Text format: 21 May 2023 or May 21, 2023\n        /(\\d{1,2})\\s+([A-Za-z]+)\\s+(\\d{4})|([A-Za-z]+)\\s+(\\d{1,2}),?\\s+(\\d{4})/,\n        // Common formats for \"X days ago\" or \"yesterday\"\n        /(?:yesterday|(\\d+)\\s+days?\\s+ago)/i\n    ];\n    let match = null;\n    let matchedPattern = -1;\n    // Try each pattern\n    for(let i = 0; i < patterns.length; i++){\n        const pattern = patterns[i];\n        match = pattern.exec(text);\n        if (match) {\n            matchedPattern = i;\n            break;\n        }\n    }\n    if (!match) return null;\n    const now = new Date();\n    let date;\n    // Parse based on which pattern matched\n    switch(matchedPattern){\n        case 0:\n            return new Date(match[1]);\n        case 1:\n            return new Date(`${match[3]}-${match[2]}-${match[1]}`);\n        case 2:\n            return new Date(`${match[3]}-${match[1]}-${match[2]}`);\n        case 3:\n            if (match[1]) {\n                // 21 May 2023 format\n                const day = parseInt(match[1]);\n                const month = getMonthNumber(match[2]);\n                const year = parseInt(match[3]);\n                if (month === -1) return null;\n                return new Date(year, month, day);\n            } else {\n                // May 21, 2023 format\n                const day = parseInt(match[5]);\n                const month = getMonthNumber(match[4]);\n                const year = parseInt(match[6]);\n                if (month === -1) return null;\n                return new Date(year, month, day);\n            }\n        case 4:\n            if (match[0].toLowerCase() === 'yesterday') {\n                date = new Date(now);\n                date.setDate(date.getDate() - 1);\n                return date;\n            } else if (match[1]) {\n                const daysAgo = parseInt(match[1]);\n                date = new Date(now);\n                date.setDate(date.getDate() - daysAgo);\n                return date;\n            }\n            return null;\n        default:\n            return null;\n    }\n}\n// Helper function to convert month name to number\nfunction getMonthNumber(monthName) {\n    const months = {\n        'jan': 0,\n        'january': 0,\n        'feb': 1,\n        'february': 1,\n        'mar': 2,\n        'march': 2,\n        'apr': 3,\n        'april': 3,\n        'may': 4,\n        'jun': 5,\n        'june': 5,\n        'jul': 6,\n        'july': 6,\n        'aug': 7,\n        'august': 7,\n        'sep': 8,\n        'september': 8,\n        'oct': 9,\n        'october': 9,\n        'nov': 10,\n        'november': 10,\n        'dec': 11,\n        'december': 11\n    };\n    const key = monthName.toLowerCase().substring(0, 3);\n    return key in months ? months[key] : -1;\n}\n// Extract merchant name from email\nfunction extractMerchant(email) {\n    const fromName = email.from.name || '';\n    const fromEmail = email.from.email || '';\n    // If from name exists and isn't just an email, use it\n    if (fromName && !fromName.includes('@')) {\n        // Clean up common patterns in sender names\n        return fromName.replace(/^[\"\"']|[\"\"']$/g, '') // Remove quotes\n        .replace(/\\bno-?reply\\b/i, '') // Remove 'noreply' or 'no-reply'\n        .replace(/\\b(?:billing|account|service|customer|support|team|info|mail)\\b/i, '') // Remove common terms\n        .replace(/<.*?>/, '') // Remove anything in angle brackets\n        .trim();\n    }\n    // Otherwise, extract domain from email and clean it up\n    const domain = fromEmail.split('@')[1] || '';\n    const parts = domain.split('.');\n    // Use the main part of the domain (e.g., 'example' from 'example.com')\n    if (parts.length >= 2) {\n        return parts[parts.length - 2].charAt(0).toUpperCase() + parts[parts.length - 2].slice(1);\n    }\n    return domain || 'Unknown Merchant';\n}\n// Debug flag to enable detailed logging\nlet DEBUG_TRANSACTIONS = false;\n// Helper to log debug information\nfunction debugLog(...args) {\n    if (DEBUG_TRANSACTIONS) {\n        console.log('[TRANSACTION-DEBUG]', ...args);\n    }\n}\n// Fetch transactions from Gmail\nasync function fetchTransactionsFromGmail(accessToken, daysBack = 30, maxResults = 100, debug = false) {\n    // Set debug mode based on parameter\n    DEBUG_TRANSACTIONS = debug;\n    // Calculate date range\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - daysBack);\n    // Format dates for Gmail query\n    const after = startDate.toISOString().split('T')[0];\n    // Create Gmail search query for specific providers like Uber and American Express\n    // This query is more targeted to find emails that users are expecting\n    const query = `newer_than:${daysBack}d (\n    from:uber.com OR from:uber.nl OR from:email.uber.com OR from:uber@uber.com OR \n    from:noreply@uber.com OR from:ubereats@uber.com OR from:uber.eats@uber.com OR\n    \n    from:americanexpress.com OR from:email.americanexpress.com OR \n    from:amex@americanexpress.com OR from:amex.com OR \n    from:americanexpress@welcome.americanexpress.com OR \n    from:americanexpress@member.americanexpress.com OR\n    from:americanexpress@email.americanexpress.com OR\n    \n    from:paypal.com OR from:service@paypal.com OR from:paypal@mail.paypal.com OR\n    from:amazon.com OR from:amazon.nl OR from:amazon.de OR from:shipment-tracking@amazon.com OR\n    from:bol.com OR from:order@bol.com OR from:no-reply@bol.com OR\n    \n    subject:\"receipt\" OR subject:\"payment\" OR subject:\"transaction\" OR\n    subject:\"payment confirmation\" OR subject:\"order confirmation\" OR\n    subject:\"purchase\" OR subject:\"bestelling\" OR subject:\"betaling\" OR\n    \n    (subject:\"uber\" AND (subject:\"receipt\" OR subject:\"order\" OR subject:\"trip\" OR subject:\"ride\")) OR\n    (subject:\"american express\" OR subject:\"amex\") OR\n    \n    (subject:\"transaction alert\" OR subject:\"purchase alert\")\n  )`;\n    try {\n        // Fetch emails that potentially contain transactions (both read and unread)\n        debugLog('Fetching emails with query:', query);\n        const result = await (0,_google_gmail__WEBPACK_IMPORTED_MODULE_0__.fetchEmails)(accessToken, maxResults, query);\n        const emails = result.emails || [];\n        debugLog(`Found ${emails.length} potential transaction emails`);\n        // Create a new deduplication set for this function call\n        const processedMessageIds = new Set();\n        // Process each email to extract transactions\n        const transactions = [];\n        for (const email of emails){\n            try {\n                // Skip already processed emails (deduplication within this batch only)\n                if (processedMessageIds.has(email.id)) {\n                    debugLog(`Skipping already processed email: ${email.id} - \"${email.subject}\"`);\n                    continue;\n                }\n                debugLog('--------------------------------------------------');\n                debugLog(`Processing email: ${email.id}`);\n                debugLog(`From: ${email.from.name} <${email.from.email}>`);\n                debugLog(`Subject: ${email.subject}`);\n                debugLog(`Date: ${new Date(email.date).toLocaleString()}`);\n                // Add to this batch's processed set\n                processedMessageIds.add(email.id);\n                // First try the pattern-based extraction\n                debugLog('Attempting pattern-based extraction...');\n                let transaction = extractTransactionFromEmail(email);\n                // If that fails, try the ML-style classification approach\n                if (!transaction) {\n                    debugLog('Pattern-based extraction failed, trying ML-style approach...');\n                    transaction = classifyAndExtractTransaction(email);\n                }\n                if (transaction) {\n                    debugLog('Transaction found!', {\n                        amount: transaction.amount,\n                        currency: transaction.currency,\n                        merchant: transaction.merchant,\n                        category: transaction.category,\n                        description: transaction.description,\n                        date: transaction.date\n                    });\n                    transactions.push(transaction);\n                } else {\n                    debugLog('No transaction found in this email');\n                }\n            } catch (error) {\n                console.error(\"Error extracting transaction from email:\", error);\n                debugLog('Error processing email:', error);\n            }\n        }\n        debugLog(`Extracted ${transactions.length} transactions from ${emails.length} emails`);\n        // Sort by date (newest first)\n        return transactions.sort((a, b)=>b.date.getTime() - a.date.getTime());\n    } catch (error) {\n        console.error(\"Error fetching transactions from Gmail:\", error);\n        debugLog('Error fetching transactions:', error);\n        return [];\n    }\n}\n// ML-style classification approach for transaction detection\nfunction classifyAndExtractTransaction(email) {\n    const content = email.snippet + (email.body || '');\n    const subject = email.subject || '';\n    const fromDomain = email.from.email.split('@')[1]?.toLowerCase() || '';\n    const fromName = email.from.name?.toLowerCase() || '';\n    // Check if email contains both a currency pattern and a date\n    const currencyInfo = extractCurrencyAmount(content) || extractCurrencyAmount(subject);\n    const extractedDate = extractDate(content) || extractDate(subject) || new Date(email.date);\n    if (!currencyInfo) {\n        return null;\n    }\n    // Extract transaction details\n    const { amount, currency } = currencyInfo;\n    // Determine transaction type based on amount and content\n    let type = amount < 0 ? 'expense' : 'income';\n    if (content.toLowerCase().includes('refund') || subject.toLowerCase().includes('refund') || content.toLowerCase().includes('terugbetaling') || subject.toLowerCase().includes('terugbetaling') || content.toLowerCase().includes('restitutie') || subject.toLowerCase().includes('restitutie')) {\n        type = 'refund';\n    }\n    // Ensure expenses are negative\n    let adjustedAmount = amount;\n    if (type === 'expense' && adjustedAmount > 0) {\n        adjustedAmount = -adjustedAmount;\n    }\n    // Determine category with enhanced provider-specific detection\n    let category = 'Other';\n    // Check for specific providers in the email domain or sender name\n    if (fromDomain.includes('uber') || fromName.includes('uber') || subject.toLowerCase().includes('uber')) {\n        // Differentiate between UberEats and Uber rides\n        if (content.toLowerCase().includes('eats') || subject.toLowerCase().includes('eats') || content.toLowerCase().includes('food') || content.toLowerCase().includes('restaurant') || content.toLowerCase().includes('meal') || content.toLowerCase().includes('order')) {\n            category = 'Food & Dining';\n        } else {\n            category = 'Transportation';\n        }\n    } else if (fromDomain.includes('americanexpress') || fromName.includes('american express') || fromName.includes('amex') || subject.toLowerCase().includes('american express') || subject.toLowerCase().includes('amex')) {\n        category = 'Credit Card';\n    } else if (content.toLowerCase().includes('salary') || content.toLowerCase().includes('salaris') || content.toLowerCase().includes('payment') || content.toLowerCase().includes('betaling')) {\n        category = 'Income';\n    } else if (content.toLowerCase().includes('food') || content.toLowerCase().includes('eten') || content.toLowerCase().includes('restaurant') || content.toLowerCase().includes('meal') || content.toLowerCase().includes('maaltijd')) {\n        category = 'Food & Dining';\n    } else if (content.toLowerCase().includes('transport') || content.toLowerCase().includes('travel') || content.toLowerCase().includes('uber') || content.toLowerCase().includes('train') || content.toLowerCase().includes('trein') || content.toLowerCase().includes('bus')) {\n        category = 'Transportation';\n    } else if (content.toLowerCase().includes('shop') || content.toLowerCase().includes('winkel') || content.toLowerCase().includes('order') || content.toLowerCase().includes('bestelling')) {\n        category = 'Shopping';\n    }\n    // Extract merchant\n    const merchant = extractMerchant(email);\n    // Create description from subject or first 100 chars of snippet\n    const description = subject || content.substring(0, 100).trim();\n    // Create transaction object\n    return {\n        id: `email_${email.id}`,\n        date: extractedDate,\n        amount: adjustedAmount,\n        currency,\n        description,\n        category,\n        merchant,\n        status: 'completed',\n        type,\n        source: 'email',\n        sourceDetails: {\n            emailId: email.id,\n            from: email.from.email,\n            subject: email.subject,\n            timestamp: new Date(email.date)\n        }\n    };\n}\n// Get transaction statistics\nfunction getTransactionStats(transactions) {\n    // Calculate total income, expenses, and balance\n    const totalIncome = transactions.filter((t)=>t.type === 'income').reduce((sum, t)=>sum + t.amount, 0);\n    const totalExpenses = transactions.filter((t)=>t.type === 'expense').reduce((sum, t)=>sum + t.amount, 0);\n    const balance = totalIncome + totalExpenses; // expenses are negative\n    // Group transactions by category\n    const byCategory = transactions.reduce((acc, transaction)=>{\n        const { category } = transaction;\n        if (!acc[category]) {\n            acc[category] = 0;\n        }\n        acc[category] += Math.abs(transaction.amount); // Use absolute value for the count\n        return acc;\n    }, {});\n    // Sort categories by amount\n    const categories = Object.entries(byCategory).map(([name, amount])=>({\n            name,\n            amount\n        })).sort((a, b)=>b.amount - a.amount);\n    // Group transactions by day\n    const byDay = transactions.reduce((acc, transaction)=>{\n        const dateStr = transaction.date.toISOString().split('T')[0];\n        if (!acc[dateStr]) {\n            acc[dateStr] = {\n                date: dateStr,\n                amount: 0\n            };\n        }\n        acc[dateStr].amount += transaction.amount;\n        return acc;\n    }, {});\n    // Sort days chronologically\n    const dailySpending = Object.values(byDay).sort((a, b)=>a.date.localeCompare(b.date));\n    return {\n        totalIncome,\n        totalExpenses,\n        balance,\n        categories,\n        dailySpending\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./utils/gmail-transactions.ts\n");

/***/ }),

/***/ "(rsc)/./utils/google-gmail.ts":
/*!*******************************!*\
  !*** ./utils/google-gmail.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchEmailById: () => (/* binding */ fetchEmailById),\n/* harmony export */   fetchEmails: () => (/* binding */ fetchEmails),\n/* harmony export */   fetchGmailLabels: () => (/* binding */ fetchGmailLabels),\n/* harmony export */   getEmailCounts: () => (/* binding */ getEmailCounts),\n/* harmony export */   getGmailClient: () => (/* binding */ getGmailClient),\n/* harmony export */   markAsRead: () => (/* binding */ markAsRead),\n/* harmony export */   toggleStar: () => (/* binding */ toggleStar)\n/* harmony export */ });\n/* harmony import */ var googleapis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! googleapis */ \"(rsc)/./node_modules/googleapis/build/src/index.js\");\n\n// Initialize Gmail API client\nasync function getGmailClient(accessToken) {\n    if (!accessToken) {\n        throw new Error(\"Access token is required for Gmail API\");\n    }\n    console.log(\"Initializing Gmail client with access token\");\n    const auth = new googleapis__WEBPACK_IMPORTED_MODULE_0__.google.auth.OAuth2();\n    auth.setCredentials({\n        access_token: accessToken\n    });\n    return googleapis__WEBPACK_IMPORTED_MODULE_0__.google.gmail({\n        version: 'v1',\n        auth\n    });\n}\n// Extract email from header value (e.g., \"John Doe <john@example.com>\" -> { name: \"John Doe\", email: \"john@example.com\" })\nfunction parseEmailAddress(headerValue) {\n    if (!headerValue) {\n        return {\n            email: 'unknown@example.com'\n        };\n    }\n    // Check if the format is \"Name <email>\"\n    const match = headerValue.match(/^(.*?)\\s*<([^>]+)>$/);\n    if (match) {\n        return {\n            name: match[1].trim().replace(/[\"']/g, ''),\n            email: match[2].trim()\n        };\n    }\n    // If not in that format, assume it's just an email\n    return {\n        email: headerValue.trim()\n    };\n}\n// Parse \"To\" header which may contain multiple recipients\nfunction parseToAddresses(headerValue) {\n    if (!headerValue) {\n        return [];\n    }\n    // Split by commas, then extract email parts\n    return headerValue.split(',').map((part)=>{\n        const parsed = parseEmailAddress(part.trim());\n        return parsed.email;\n    }).filter(Boolean);\n}\n// Extract a specific header value from Gmail message\nfunction getHeader(message, name) {\n    if (!message.payload?.headers) return undefined;\n    const header = message.payload.headers.find((h)=>h.name.toLowerCase() === name.toLowerCase());\n    return header?.value;\n}\n// Decode base64 content\nfunction decodeBase64(data) {\n    // Convert from URL-safe base64 to standard base64\n    const base64Data = data.replace(/-/g, '+').replace(/_/g, '/');\n    try {\n        // For browser environment\n        return atob(base64Data);\n    } catch (e) {\n        // For Node.js environment\n        return Buffer.from(base64Data, 'base64').toString('utf-8');\n    }\n}\n// Extract email body content from parts\nfunction extractBodyContent(payload) {\n    // If the message is a simple text or HTML\n    if (payload.body?.data) {\n        return decodeBase64(payload.body.data);\n    }\n    // If the message has parts (multipart message)\n    if (payload.parts && payload.parts.length) {\n        // First try to find an HTML part\n        const htmlPart = payload.parts.find((part)=>part.mimeType === 'text/html');\n        if (htmlPart && htmlPart.body?.data) {\n            return decodeBase64(htmlPart.body.data);\n        }\n        // If no HTML part, try to find a text part\n        const textPart = payload.parts.find((part)=>part.mimeType === 'text/plain');\n        if (textPart && textPart.body?.data) {\n            return decodeBase64(textPart.body.data);\n        }\n        // If no HTML or text part at this level, recursively check nested parts\n        for (const part of payload.parts){\n            if (part.parts) {\n                const nestedContent = extractBodyContent(part);\n                if (nestedContent) {\n                    return nestedContent;\n                }\n            }\n        }\n    }\n    return '';\n}\n// Convert Gmail raw message to app email format\nfunction convertGmailMessageToEmail(message) {\n    const fromHeader = getHeader(message, 'From') || '';\n    const from = parseEmailAddress(fromHeader);\n    const toHeader = getHeader(message, 'To');\n    const to = parseToAddresses(toHeader);\n    const subject = getHeader(message, 'Subject') || '(No Subject)';\n    const dateHeader = getHeader(message, 'Date');\n    const date = dateHeader ? new Date(dateHeader) : new Date();\n    const isRead = !message.labelIds?.includes('UNREAD');\n    const isStarred = message.labelIds?.includes('STARRED') || false;\n    const hasAttachments = message.payload?.mimeType?.includes('multipart') || false;\n    // Extract body content if payload is available\n    let body = '';\n    if (message.payload) {\n        body = extractBodyContent(message.payload);\n    }\n    return {\n        id: message.id,\n        threadId: message.threadId,\n        from,\n        to,\n        subject,\n        snippet: message.snippet || '',\n        body,\n        date,\n        isRead,\n        isStarred,\n        hasAttachments,\n        labels: message.labelIds || [],\n        sizeEstimate: message.sizeEstimate\n    };\n}\n// Fetch user's Gmail labels\nasync function fetchGmailLabels(accessToken) {\n    try {\n        const gmail = await getGmailClient(accessToken);\n        const response = await gmail.users.labels.list({\n            userId: 'me'\n        });\n        return response.data.labels || [];\n    } catch (error) {\n        console.error('Error fetching Gmail labels:', error);\n        throw error;\n    }\n}\n// Fetch emails from inbox with pagination\nasync function fetchEmails(accessToken, maxResults = 10, query = 'in:inbox', pageToken) {\n    try {\n        console.log(`Fetching emails with query: ${query}`);\n        const gmail = await getGmailClient(accessToken);\n        // First, list message IDs based on the query\n        const messagesResponse = await gmail.users.messages.list({\n            userId: 'me',\n            maxResults,\n            q: query,\n            pageToken\n        });\n        const messageIds = messagesResponse.data.messages || [];\n        console.log(`Found ${messageIds.length} messages`);\n        if (messageIds.length === 0) {\n            return {\n                emails: []\n            };\n        }\n        // Then, fetch full messages for each ID\n        const emails = await Promise.all(messageIds.map(async ({ id, threadId })=>{\n            if (!id) return null;\n            const messageResponse = await gmail.users.messages.get({\n                userId: 'me',\n                id,\n                format: 'metadata',\n                metadataHeaders: [\n                    'From',\n                    'To',\n                    'Subject',\n                    'Date'\n                ]\n            });\n            return convertGmailMessageToEmail(messageResponse.data);\n        }));\n        return {\n            emails: emails.filter(Boolean),\n            nextPageToken: messagesResponse.data.nextPageToken\n        };\n    } catch (error) {\n        console.error('Error fetching emails:', error);\n        // Show more detailed error information\n        if (error instanceof Error) {\n            console.error('Error message:', error.message);\n            console.error('Error stack:', error.stack);\n        }\n        // Return empty array rather than failing completely\n        return {\n            emails: []\n        };\n    }\n}\n// Fetch a specific email by ID\nasync function fetchEmailById(accessToken, messageId) {\n    try {\n        console.log(`Fetching email with ID: ${messageId}`);\n        const gmail = await getGmailClient(accessToken);\n        const messageResponse = await gmail.users.messages.get({\n            userId: 'me',\n            id: messageId,\n            format: 'full'\n        });\n        return convertGmailMessageToEmail(messageResponse.data);\n    } catch (error) {\n        console.error(`Error fetching email ${messageId}:`, error);\n        return null;\n    }\n}\n// Mark an email as read\nasync function markAsRead(accessToken, messageId) {\n    try {\n        const gmail = await getGmailClient(accessToken);\n        await gmail.users.messages.modify({\n            userId: 'me',\n            id: messageId,\n            requestBody: {\n                removeLabelIds: [\n                    'UNREAD'\n                ]\n            }\n        });\n        return true;\n    } catch (error) {\n        console.error(`Error marking email ${messageId} as read:`, error);\n        return false;\n    }\n}\n// Toggle star status of an email\nasync function toggleStar(accessToken, messageId, star) {\n    try {\n        const gmail = await getGmailClient(accessToken);\n        const requestBody = star ? {\n            addLabelIds: [\n                'STARRED'\n            ]\n        } : {\n            removeLabelIds: [\n                'STARRED'\n            ]\n        };\n        await gmail.users.messages.modify({\n            userId: 'me',\n            id: messageId,\n            requestBody\n        });\n        return true;\n    } catch (error) {\n        console.error(`Error toggling star for email ${messageId}:`, error);\n        return false;\n    }\n}\n// Get email counts by label/category\nasync function getEmailCounts(accessToken) {\n    try {\n        const gmail = await getGmailClient(accessToken);\n        // Get all user labels\n        const labelsResponse = await gmail.users.labels.list({\n            userId: 'me'\n        });\n        const labels = labelsResponse.data.labels || [];\n        const counts = {};\n        // Get counts for important system labels\n        const importantLabels = [\n            'INBOX',\n            'UNREAD',\n            'STARRED',\n            'IMPORTANT',\n            'SENT',\n            'DRAFT',\n            'SPAM',\n            'TRASH'\n        ];\n        for (const labelName of importantLabels){\n            const label = labels.find((l)=>l.id === labelName);\n            if (label) {\n                counts[labelName.toLowerCase()] = label.messagesUnread || 0;\n            }\n        }\n        return counts;\n    } catch (error) {\n        console.error('Error getting email counts:', error);\n        return {};\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./utils/google-gmail.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "http2":
/*!************************!*\
  !*** external "http2" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("http2");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:process");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/next-auth","vendor-chunks/@babel","vendor-chunks/jose","vendor-chunks/openid-client","vendor-chunks/oauth","vendor-chunks/lru-cache","vendor-chunks/object-hash","vendor-chunks/preact","vendor-chunks/preact-render-to-string","vendor-chunks/cookie","vendor-chunks/@auth","vendor-chunks/oidc-token-hash","vendor-chunks/@panva","vendor-chunks/googleapis","vendor-chunks/google-auth-library","vendor-chunks/tr46","vendor-chunks/bignumber.js","vendor-chunks/googleapis-common","vendor-chunks/gaxios","vendor-chunks/node-fetch","vendor-chunks/whatwg-url","vendor-chunks/qs","vendor-chunks/json-bigint","vendor-chunks/google-logging-utils","vendor-chunks/object-inspect","vendor-chunks/gcp-metadata","vendor-chunks/debug","vendor-chunks/get-intrinsic","vendor-chunks/https-proxy-agent","vendor-chunks/gtoken","vendor-chunks/agent-base","vendor-chunks/jws","vendor-chunks/jwa","vendor-chunks/url-template","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/webidl-conversions","vendor-chunks/base64-js","vendor-chunks/side-channel-list","vendor-chunks/extend","vendor-chunks/ms","vendor-chunks/supports-color","vendor-chunks/side-channel-weakmap","vendor-chunks/has-symbols","vendor-chunks/function-bind","vendor-chunks/side-channel-map","vendor-chunks/safe-buffer","vendor-chunks/side-channel","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/buffer-equal-constant-time","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/call-bound","vendor-chunks/is-stream","vendor-chunks/es-errors","vendor-chunks/has-flag","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fbanking%2Ftransactions%2Froute&page=%2Fapi%2Fbanking%2Ftransactions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbanking%2Ftransactions%2Froute.ts&appDir=%2FUsers%2Fyustintroost%2FDocuments%2Fsites%2Fyustboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyustintroost%2FDocuments%2Fsites%2Fyustboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();