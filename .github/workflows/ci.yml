name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

jobs:
  # ✅ Code Quality & Security
  lint-and-security:
    name: 🔍 Lint & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 ESLint check
        run: npm run lint

      - name: 🛡️ Security audit
        run: npm audit --audit-level=moderate

      - name: 📊 Bundle analyzer
        run: |
          npm run build
          npx @next/bundle-analyzer

  # ✅ Type Safety
  typecheck:
    name: 🏷️ TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏷️ Type check
        run: npm run typecheck

  # ✅ Testing Suite
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Setup test database
        run: |
          # Setup PostgreSQL for testing
          docker run -d \
            --name postgres-test \
            -e POSTGRES_PASSWORD=test \
            -e POSTGRES_DB=yustboard_test \
            -p 5432:5432 \
            postgres:15-alpine

      - name: ⏳ Wait for database
        run: |
          until docker exec postgres-test pg_isready; do
            echo "Waiting for postgres..."
            sleep 1
          done

      - name: 🛠️ Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:test@localhost:5432/yustboard_test" >> .env.test
          npx prisma migrate deploy --schema=prisma/schema.prisma

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: |
          case "${{ matrix.test-type }}" in
            unit)
              npm run test:unit
              ;;
            integration)
              npm run test:integration
              ;;
            e2e)
              npm run test:e2e
              ;;
          esac

      - name: 📊 Upload coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  # ✅ Build Verification
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint-and-security, typecheck]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📊 Check build size
        run: |
          echo "Build size analysis:"
          du -sh .next/
          echo "Static files:"
          find .next/static -name "*.js" -exec ls -lh {} \; | head -10

      - name: 💾 Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .next
            node_modules
          key: ${{ runner.os }}-build-${{ github.sha }}

  # ✅ Storybook Build
  storybook:
    name: 📚 Storybook
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📚 Build Storybook
        run: npm run build-storybook

      - name: 🚀 Deploy Storybook to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
          destination_dir: storybook

  # ✅ Performance Testing
  lighthouse:
    name: 🔍 Lighthouse
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
