generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Multi-tenant Organization model
model Organization {
  id                String                 @id @default(cuid())
  name              String
  slug              String                 @unique
  description       String?
  logo              String?
  plan              Plan                   @default(FREE)
  stripeCustomerId  String?                @unique
  stripeSubscriptionId String?             @unique
  trialEndsAt       DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  // Relations
  users             User[]
  memberships       OrganizationMembership[]
  posts             Post[]
  tasks             Task[]
  transactions      Transaction[]
  widgetPreferences UserWidgetPreference[]
  blogPosts         BlogPost[]
  settings          OrganizationSettings?
  invites           OrganizationInvite[]

  @@index([slug])
  @@index([plan])
}

model OrganizationMembership {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@index([role])
}

model OrganizationSettings {
  id               String       @id @default(cuid())
  organizationId   String       @unique
  allowUserInvites Boolean      @default(true)
  maxUsers         Int?
  maxWidgets       Int?
  customDomain     String?
  brandingEnabled  Boolean      @default(false)
  logoUrl          String?
  primaryColor     String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model OrganizationInvite {
  id             String             @id @default(cuid())
  organizationId String?
  email          String
  role           OrganizationRole   @default(MEMBER)
  token          String             @unique
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime           @default(now())
  organization   Organization?       @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
  @@index([token])
  @@index([email])
}

model User {
  id                String                 @id @default(cuid())
  name              String?
  email             String?                @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime               @default(now())
  role              UserRole               @default(USER)
  updatedAt         DateTime               @default(now()) @updatedAt

  // Multi-tenant fields - keep for backwards compatibility and current active org
  organizationId    String?
  organizationRole  OrganizationRole       @default(MEMBER)

  // Relations
  organization      Organization?          @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  memberships       OrganizationMembership[]
  accounts          Account[]
  posts             Post[]
  comments          PostComment[]
  likes             PostLike[]
  sessions          Session[]
  tasks             Task[]
  transactions      Transaction[]
  widgetPreferences UserWidgetPreference[]
  blogPosts         BlogPost[]

  @@index([organizationId])
  @@index([email])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id             String       @id @default(cuid())
  title          String
  description    String?
  date           DateTime
  completed      Boolean      @default(false)
  userId         String
  organizationId String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model Transaction {
  id             String       @id @default(cuid())
  amount         Float
  description    String
  date           DateTime
  category       String?
  userId         String
  organizationId String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model Post {
  id             String        @id @default(cuid())
  content        String
  userId         String
  organizationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  comments       PostComment[]
  likes          PostLike[]
  media          PostMedia[]

  @@index([organizationId])
  @@index([createdAt(sort: Desc)])
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model PostComment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId, createdAt])
}

model PostMedia {
  id        String   @id @default(cuid())
  postId    String
  type      String
  url       String
  filename  String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model UserWidgetPreference {
  id             String       @id @default(cuid())
  userId         String
  widgetId       String
  organizationId String?
  enabled        Boolean      @default(true)
  position       Int          @default(0)
  settings       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, widgetId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model GlobalMenuSetting {
  id        String   @id @default(cuid())
  menuItem  String   @unique
  enabled   Boolean  @default(true)
  position  Int      @default(0)
  icon      String?
  path      String
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id             String       @id @default(cuid())
  title          String
  slug           String       @unique
  excerpt        String
  content        String       @db.Text
  coverImage     String?
  published      Boolean      @default(false)
  authorId       String
  organizationId String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  publishedAt    DateTime?
  author         User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([published, publishedAt])
  @@index([authorId])
  @@index([organizationId])
}

enum UserRole {
  USER
  AUTHOR
  ADMIN
}

enum Plan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

// Landing Page Content Models
model LandingHero {
  id              String   @id @default(cuid())
  title           String
  subtitle        String
  description     String   @db.Text
  ctaText         String
  ctaLink         String
  backgroundImage String?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model LandingAbout {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  image     String?
  skills    Json     // Array of skills with name and percentage
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LandingProject {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  image       String
  link        String?
  github      String?
  tags        Json     // Array of technology tags
  featured    Boolean  @default(false)
  order       Int      @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LandingContact {
  id        String   @id @default(cuid())
  email     String
  phone     String?
  address   String?
  linkedin  String?
  github    String?
  twitter   String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
