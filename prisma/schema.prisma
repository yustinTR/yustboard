generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          UserRole      @default(USER)
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  tasks         Task[]
  transactions  Transaction[]
  likes         PostLike[]
  comments      PostComment[]
  widgetPreferences UserWidgetPreference[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  completed   Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  category    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String        @id @default(cuid())
  content   String        @db.Text
  userId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     PostLike[]
  comments  PostComment[]
  media     PostMedia[]

  @@index([createdAt(sort: Desc)])
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userId])
}

model PostComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([postId, createdAt])
}

model PostMedia {
  id        String   @id @default(cuid())
  postId    String
  type      String   // 'image' or 'file'
  url       String
  filename  String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@index([postId])
}

model UserWidgetPreference {
  id        String   @id @default(cuid())
  userId    String
  widgetId  String
  enabled   Boolean  @default(true)
  position  Int      @default(0)
  settings  Json?    // Widget-specific settings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, widgetId])
  @@index([userId])
}

model GlobalMenuSetting {
  id        String   @id @default(cuid())
  menuItem  String   @unique
  enabled   Boolean  @default(true)
  position  Int      @default(0)
  icon      String?
  path      String
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
